#!/usr/bin/env ruby

# MIT License

# Copyright (c) 2017 Till Bovermann

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


require_relative 'lib/trollop'
require 'date'
require 'socket'

module Fielding
  myIP = "192.168.0.2";
  myname = File.basename($0, File.extname($0));

  opts = Trollop::options do
    banner <<-EOS
#{myname} facilitates board/process management for more than one BELA.
Usage:
       #{myname} [options]
where [options] are:
    EOS
    opt :exec, "Execute on board[s]", :short => 'x', :type => :string

  	opt :date, "Set board[s] date from here"
    opt :ntpserver, "ntp server to use", :type => :string
    opt :info, "gather info on current status", :short => 'i'

    opt :scsynth, "start scsynth process"
    opt :scsynthparams, "parameters for scsynth (2 in, 2 out, 4 AnalogIn, 0 AnalogOut, speaker amps muted)", :default => "-t 57110 -z 256 -Z 256 -J 4 -K 0 -G 0 -i 2 -o 2 -s 1"
    opt :scsynthkill, "kill all scsynth processed"

    opt :idestop, "Stop IDE, survives reboot"
    opt :idestart, "Start IDE, survives reboot"

    opt :halt, "Halt board[s]", :short => 'e'

    opt :local, "set IP to USB connection (192.168.7.2)", :short => 'l'
  	opt :ips, "IP addresses", :long => 'ip', :type => :strings, :default => ["192.168.0.10", "192.168.0.11", "192.168.0.12"]
    opt :force, "do not test if host is alive", :short => 'f'
  end

  # opts is a hash! i.e.{ :monkey=>false, :name=>nil, :num_limbs=>4, :help=>false }
  # print it via
  # p opts

  if !opts[:info] && !opts[:exec] && !opts[:halt] && !opts[:date] && !opts[:idestop] && !opts[:idestart]  && !opts[:scsynth] && !opts[:scsynthkill]
    Trollop::educate
  end


  def Fielding.execute(cmd, ips, force)
    ips.each do |ip|
      
      if force
        alive = true
      else
        alive = system("ping -c1 -W1 #{ip} &> /dev/null")
      end

      if alive
        puts "#{ip} <---- #{cmd}"
        # spawn("ssh root@#{ip} #{cmd}")
        system("ssh root@#{ip} #{cmd}")
      else
        puts "#{ip} offline"
      end
    end
  end

  def Fielding.executeNonBlocking(cmd, ips)
    ips.each do |ip|
      
        puts "#{ip} <-nb- #{cmd}"
        Process.spawn("ssh root@#{ip} #{cmd}")
        # system("ssh root@#{ip} #{cmd}")
    end
  end

  def Fielding.info(ips, force)
    ips.each do |ip|
      if force
        alive = true
      else
        alive = system("ping -c1 -W1 #{ip} &> /dev/null")
      end

      if alive
        # Fielding.execute("echo \`date\` && echo \`ps -A | grep scsynth\`", [ip], true)
        Fielding.execute("date", [ip], true)
        Fielding.execute("ps -A | grep scsynth", [ip], true)
      end
  end
end

# set date either from local machine or, if ntpserver is set, from that server
  def Fielding.setDate(ntpserver, ips, force)
    ips.each do |ip|
      if force
        alive = true
      else
        alive = system("ping -c1 -W1 #{ip} &> /dev/null")
      end

      if alive
        Fielding.execute("/etc/init.d/ntp stop", [ip], true)
        if !ntpserver
          date = DateTime.now.iso8601;
          Fielding.execute("date -s \"#{date}\"", [ip], true)
          # exec("ssh root@#{ip} \"date +%s -s @\$(netcat #{myIP} 3333)\"")
        else
          Fielding.execute("ntpdate #{ntpserver}", [ip], true)
        end
        Fielding.execute("/etc/init.d/ntp start", [ip], true)
      else
        puts "#{ip} offline"
      end
    end
  end


  # check if we're operating on USB port
  if opts[:local]
    opts[:ips] = ["192.168.7.2"]
  end

  # exec takes precendence
  if opts[:exec]
    Fielding.execute(opts[:exec], opts[:ips], opts[:force])
    exit 0
  end

  if opts[:scsynth]
    Fielding.execute("screen -d -m -S scsynth scsynth #{opts[:scsynthparams]}", opts[:ips], opts[:force])
    exit 0
  end

  if opts[:scsynthkill]
    Fielding.execute("killall scsynth", opts[:ips], opts[:force])
    exit 0
  end

  

  if opts[:info]
    Fielding.info(opts[:ips], opts[:force])
    exit 0
  end

  if opts[:date]
    Fielding.setDate(opts[:ntpserver], opts[:ips], opts[:force])
    exit 0
  end

  belamakescript = "make --no-print-directory -C /root/Bela"
  if opts[:idestop]
    Fielding.execute("#{belamakescript} idestop", opts[:ips], opts[:force])
    Fielding.execute("#{belamakescript} idenostartup", opts[:ips], opts[:force])
  end
  if opts[:idestart]
    Fielding.execute("#{belamakescript} idestart", opts[:ips], opts[:force])
    Fielding.execute("#{belamakescript} idestartup", opts[:ips], opts[:force])
  end

  if opts[:halt]
    Fielding.execute("halt", opts[:ips], opts[:force])
    exit 0
  end

  puts "this should not happen. prob. an \"exit 0\" missing..."

end


